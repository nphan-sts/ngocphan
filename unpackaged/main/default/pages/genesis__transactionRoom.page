<apex:page lightningStylesheets="{!$User.UIThemeDisplayed == 'Theme4d'}" standardStylesheets="false">
    <apex:include pageName="genesis__transactionRoomApp"/>
    <apex:include pageName="genesis__transactionRoomServices1"/>
    <script>
    'use strict';
    // controllers
    (function() {  
        angular.module('transactionRoomApp').filter('unsafe', ['$sce', function($sce) {
           return function(val) {
               return $sce.trustAsHtml(val);
           };
        }]);
        
        angular.module('transactionRoomApp')
            .controller('AttachmentCtrl', function($scope, $animate, attachmentsService, $rootScope) { 
            // var promise = attachmentsService.getAtchList($rootScope.applicationId);
            attachmentsService.getAtchList($rootScope.applicationId).then(function(data) {
                if(data){
                    $rootScope.attachments = data;
                    if(!$rootScope.attachments){
                        $rootScope.attachments = [];
                    } 
                }  
            });
                        
            $scope.closeAttachmentList= function(){
                var el = angular.element('#attachmentpanel');
                $animate.removeClass(el[0], 'show-attachment-list');
            };
            
            //event listener - to remove from the list
            $rootScope.$on('attachmentLinked', function(event, attachmentId){ 
            });
        });
       
        angular.module('transactionRoomApp')
            .controller('ModalInstanceCtrl', function ($scope, $modalInstance, dcList , doc ) {
                  $scope.dcList = dcList ;
                  $scope.doc = doc;
                  $scope.ok = function () {
                      $modalInstance.close($scope.customSelected);
                  };
                
                  $scope.cancel = function () {  
                      $modalInstance.dismiss('cancel');
                  };
            });
        
        angular.module('transactionRoomApp')
            .controller('ModalInstanceSummaryCtrl', function ($scope, $modalInstance, childId) {
                  $scope.childId = childId;
                  $scope.childUrl = '/apex/' + nsPrefixRef + 'SummaryDetail?id='+childId;
                  $scope.ok = function () {
                      $modalInstance.close();
                  };
                
                  $scope.cancel = function () {
                      $modalInstance.dismiss('cancel');
                  };
            });
            
        angular.module('transactionRoomApp')
            .controller('ConfirmationCtrl', function ($scope, $modalInstance, message) {
                  
                  $scope.message = message;
            
                  $scope.ok = function () {
                      $modalInstance.close();
                  };

                  $scope.cancel = function () {
                      $modalInstance.dismiss('cancel');
                  };
            });
        
        angular.module('transactionRoomApp')
           .controller('transactionRoomPageController', 
                   ['$scope', 'fetchAllADCService', 'staticDataService', 'fileUploaderService' , 'utilitiesService' ,
                        'actionsOnAttachmentsService', 'actionsOnADCService' ,'$rootScope', '$modal' , 'Upload', 
                        '$animate', 'blockUI' , '$timeout' , '$window' ,
                    function($scope, fetchAllADCService, staticDataService, fileUploaderService , utilitiesService ,
                         actionsOnAttachmentsService, actionsOnADCService , $rootScope , $modal , Upload , 
                         $animate , blockUI , $timeout , $window  ) {
            
            //static data
            staticDataService.docCatSetup().then(function(data){  
                $scope.dcList = data ;
                
            });
            
            staticDataService.adcPkListValues(nsPrefixRef + 'Application_Document_Category__c', nsPrefixRef +'Status__c').then(function(data){
                $scope.adcStatusOptns = data ;
            });
            
            staticDataService.adcPkListValues(nsPrefixRef + 'Application_Document_Category__c', nsPrefixRef +'Priority__c').then(function(data){
                $scope.adcPriorityOptns = data ;
            });
            
            staticDataService.userList($rootScope.applicationId).then(function(data){
                $scope.sfUserList = data ;
            }); 
            
            staticDataService.partyList($rootScope.applicationId).then(function(data){
                $scope.appPartyList = data ;
            }); 
            
            staticDataService.closedTaskStatusList().then(function(data){ 
                $scope.completeTaskStatus = data ;
            }); 
            
            $scope.openAttachmentList = function(){
                $rootScope.showAttachmentpanel = true;
            };
            
            
            $scope.onFileSelect = function($files) {
                $scope.files = [];         
                for (var i = 0; i < $files.length; i++) {
                    var file = $files[i];
                    var ext = file.name.substr(file.name.lastIndexOf('.') + 1);
                    var validExtensions = ['pdf','xlsx','html','doc'];
                    if(_.include(validExtensions,ext.toLowerCase())){
                    }
                    if(file.size > 26214400){
                        utilitiesService.notifyUser("warning",'File size exeeded the limit (25MB)');
                    }else{
                        $scope.files.push(file);
                        $scope.myFileName = file.name.substr(0, file.name.lastIndexOf('.')); 
                    }      
                }
            };
            
            $scope.importFiles = function(){
                blockUI.start();
                $timeout(function() {       
                    try{
                        for(var i=0; i < $scope.files.length; i++){
                            readFileContent($scope.files[i]);
                        }
                    }catch(e){              
                        blockUI.stop();
                    }               
                },250);
                
            }
            
            function uploadattachments(filecontent, filename, filetype , positionIndex , fileId){
                var attachmentBody = null;
                var chunkSize = 26214400;  
                var fileSize = filecontent.length;
                //console.log("fileSize : " + fileSize);
                var doneUploading = false;   
                attachmentBody = filecontent;            
                /*if(fileSize <= positionIndex + chunkSize) {
                    attachmentBody = filecontent.substring(positionIndex);
                    doneUploading = true;
                } else {
                    attachmentBody = filecontent.substring(positionIndex, positionIndex + chunkSize);
                }    */       
                try { 
                    fileUploaderService.registerImportRequest($scope.model.doc.data.self.Id,
                            $rootScope.applicationId,filename,filetype,
                             attachmentBody,fileId).then(function(data){ 
                        if(data && data.length > 0){
                            if(data[0].Id.substring(0,3) == '00P'){
                                fileId = data[0].Id;
                                /*if(doneUploading == false) {
                                    positionIndex += chunkSize;
                                    uploadattachments(filecontent, filename, filetype , positionIndex , fileId);
                                }else{*/
                                    $scope.myFileName = null;
                                    if(!$scope.model.doc.data.appDocAtchList){
                                        $scope.model.doc.data.appDocAtchList = [];
                                    }
                                    $scope.model.doc.data.appDocAtchList.push(data[0]);
                                    if(!$rootScope.attachments){
                                        $rootScope.attachments = [];
                                    }
                                    $rootScope.attachments.push(data[0]);
                                    blockUI.stop(); 
                               // }
                            }
                        }  
                              
                    }, function(error){
                        blockUI.stop(); 
                        
                    });
                } catch(err) {
                    utilitiesService.notifyUser("error", err);
                    blockUI.stop(); 
                }
            }
            
            function readFileContent(file){
                if(file){
                    if(file.size >= 0){
                        //console.log("file Size : " + file.size);
                        var reader = new FileReader();
                        reader.onload = function(event) {
                            var fileContents = getFileContent(event.target.result);
                            var positionIndex = 0;
                            var fileId = null;
                            //console.log("fileContents : " + fileContents.length);
                            uploadattachments(fileContents , file.name, file.type , positionIndex , fileId);  
                        };
                        reader.onerror = function(event) {
                            console.error("File could not be read! Code " + event.target.error.code);
                        };  
                        reader.readAsDataURL(file);
                    }else{
                        alert("File must be under 25 MB in size.  Your file is too large.  Please try again.");
                    }
                }else{
                    alert("You must choose a file before trying to upload it");
                } 
            }
            
            function getFileContent(fileData) {
                var fileContent = String(fileData);
                return fileContent.substr(fileContent.indexOf(',') + 1);
            }
            
            $scope.clearSelection = function(){
                $scope.myFileName = '';
                $scope.files = [];
                    
            };
                             
            var fileIcons = {
                options: {
                    'xls': 'fa-file-excel-o',
                    'xlsx': 'fa-file-excel-o',
                    'png': 'fa-file-image-o',
                    'jpg': 'fa-file-image-o',
                    'pdf': 'fa-file-pdf-o',
                    'doc': 'fa-file-word-o',
                    'docx': 'fa-file-word-o',
                    'zip': 'fa-file-archive-o',
                    'ppt': 'fa-file-powerpoint-o',
                    'pptx': 'fa-file-powerpoint-o',
                    'txt': 'fa-file-text-o'
                },
                defaultFileIcon: 'fa-file-o'
            };
            
            var statusIcons = {
                options: {
                    'OPEN': 'fa-bell faOpen',
                    'SUBMITTED': 'fa-check-square-o faSubmitted',
                    'CLEARED': 'fa-thumbs-up faCleared ',
                    'REJECTED': 'fa-thumbs-down faRejected'
                },
                defaultStatusIcon: ''
            };
            
            $scope.openActionDetails = function(detailId){
                
                var trail = this.breadCrumbs[detailId];
                var docs = model.docList;
                
                _.forEach(trail, function(node){
                     var next = _.find(docs, function(doc) {
                        return doc.self.Id === node.id;
                    });
                    
                    next.collapsed = false;
                    
                    docs = next.children;
                });    
                
               setTimeout(function(){
                        angular.element('#'+detailId)[0].click();
                }, 0);           
            };
            
            $scope.setTaskFilter = function(taskStatus){
                model.taskStatus = taskStatus;
            };
            
            $scope.applyTaskFilter = function(ts){ 
                if(model.taskStatus == 1 && ts){
                    var indx = this.completeTaskStatus.indexOf(ts.toUpperCase());
                    return (indx < 0 ? true : false);
                }else if(model.taskStatus == 2 && ts){
                    var indx = this.completeTaskStatus.indexOf(ts.toUpperCase());
                    return (indx < 0 ? false : true);
                }else{
                    return true;
                }
            }
            
            $scope.applyCompletedTaskCss = function(ts){ 
                if(model.taskStatus == 0 && ts){
                    var indx = this.completeTaskStatus.indexOf(ts.toUpperCase());
                    return (indx < 0 ? 'notCompleted': 'completedTask');
                }
                return 'notCompleted';
            }
            
            fetchAllADCService.getApplicationTree($rootScope.applicationId).then(function(data) {
               
                if(data !== null){
                   // data.selected = "selected";
                   model.docList = [data];
                   model.doc.data = model.docList[0];
                   
                   if(model.doc.data && model.doc.data.self.attributes && 
                    model.doc.data.self.attributes.type == nsPrefixRef + "Application_Document_Category__c"){
                        model.doc.isDocCat = true;
                   }
                   
                   //create the breadcrumbs
                   createBreadCrumbs(data);
                }
                
            }); 
            
            fetchAllADCService.getUserTaskList($rootScope.applicationId).then(function(data) {
                model.myTaskList = data;
                if(!model.myTaskList){
                    model.myTaskList = [];
                }
                
            });
            
            var breadCrumbs = $scope.breadCrumbs = {};
            
            function resetBreadcrumb(){
                breadCrumbs = {};
                $scope.breadCrumbs = {};
                angular.forEach(model.docStats, function(value, key) {
                  model.docStats[key] = 0;
                });
            }
            
            function createBreadCrumbs(node){
                if(!node.self.genesis__Active__c){
                    return;
                }
                
                //not visited nodes only
                if(!breadCrumbs[node.self.Id]){
                    _.each(node.children, function(child){
                        createBreadCrumbs(child);
                    });
                    
                    if(!node.children || node.children.length === 0){
                        model.docStats.TOTAL++;
                        model.docStats[node.self[nsPrefixRef + 'Status__c']]++;
                    }
                    
                    breadCrumbs[node.self.Id] = node.breadCrumb;
                }
            }
            
            $rootScope.getFileIcon = function(fileName) {
                if (!fileName)
                    return 'fa ' + fileIcons.defaultFileIcon;
                fileName = fileName.toLowerCase();
                var ext = (fileName.lastIndexOf('.') === -1) ? '' : fileName.substr(fileName.lastIndexOf('.') + 1);
                return 'fa ' + (fileIcons.options[ext] || fileIcons.defaultFileIcon);
            };
            
            $scope.getStatusIcon = function(status) {
                if (!status)
                    return fileIcons.defaultStatusIcon;
                return 'fa ' + (statusIcons.options[status] || statusIcons.defaultStatusIcon) + ' fa-lg';
            };  
            
            $scope.deleteAttachment = function(atch){
                if(atch){
                    console.log($scope.model.doc.data.self.Id); 
                    actionsOnAttachmentsService.unLinkedAtchList($rootScope.applicationId,
                                $scope.model.doc.data.self.Id , atch.Id).then(function(data) {
                        if( data && data.toUpperCase() == 'SUCCESS' ){
                            $scope.model.doc.data.appDocAtchList.remove(atch);
                        }
                    });   
                } 
            }
                       
            $scope.deleteDocument = function(node,atch) {
                model.doc.data = node;
                $scope.selectedModel = _.cloneDeep($scope.model.doc.data);
                if(atch){
                    actionsOnAttachmentsService.unLinkedAtchList($rootScope.applicationId,
                                $scope.model.doc.data.self.Id , atch.Id).then(function(data) {
                        if( data && data.toUpperCase() == 'SUCCESS' ){
                            $scope.model.doc.data.appDocAtchList.remove(atch);
                        }
                    }); 
                }else{
                    
                    var modalInstance = $modal.open({
                        templateUrl: 'dealRoomConfirmation.html',
                        controller: 'ConfirmationCtrl',
                        size: 'sm' ,
                        resolve: {
                           message : function(){
                               return 'Are you sure you want to delete?';
                           },   
                    }
                        
                    });

                    modalInstance.result.then(function () { 
                       //call show doc detail - user said yes
                        var nodesToDeleteList = [];
                        nodesToDeleteList.push($scope.model.doc.data.self.Id);
                        actionsOnADCService.deleteAppDoc($rootScope.applicationId,nodesToDeleteList).then(function(data){
                            if(data && data.toUpperCase() == 'SUCCESS' ){                           
                                $scope.model.doc.data.self.genesis__Active__c = false;
                                $scope.model.doc.data.collapsed = true;
                                resetBreadcrumb();
                                createBreadCrumbs(model.docList[0]);
                                fetchAllADCService.getUserTaskList($rootScope.applicationId).then(function(data) {
                                    model.myTaskList = data;
                                    if(!model.myTaskList){
                                        model.myTaskList = [];
                                    }
                                    
                                });
                                model.doc.data = model.docList[0];
                                $scope.selectedModel = null;
                            }
                        });

                    }, function () {
                        //dismissed - do nothing
                    });
                }                
                
            }
            
            $scope.undodeleteDocument = function(node, $event) {
    
                var nodesToDeleteList = [];
                nodesToDeleteList.push(node.self.Id);
                actionsOnADCService.undodeleteAppDoc($rootScope.applicationId,nodesToDeleteList).then(function(data){
                        if(data && data.toUpperCase() == 'SUCCESS' ){  
                            model.doc.data = node ;
                            $scope.selectedModel = _.cloneDeep($scope.model.doc.data);
                            $scope.selectNodeLabel(node, $event); 
                                                    
                            $scope.model.doc.data.self.genesis__Active__c = true;
                            $scope.model.doc.data.appDocAtchList = [];
                            $scope.selectedModel = _.cloneDeep($scope.model.doc.data);
                            resetBreadcrumb();
                            createBreadCrumbs(model.docList[0]);
                            fetchAllADCService.getUserTaskList($rootScope.applicationId).then(function(data) {
                                model.myTaskList = data;
                                if(!model.myTaskList){
                                    model.myTaskList = [];
                                }
                                
                            });
                        }
                    });
            }
            
            $scope.notify = function() {
                if($scope.model.doc.data && $scope.model.doc.data.self){
                    actionsOnADCService.sendNotification($rootScope.applicationId,
                                    $scope.model.doc.data.self.Id).then(function(data){ 
                           utilitiesService.notifyUser("warning",'Notification sent!');           
                    });
                    
                } 
                
            }
            
            $scope.editDocumentDetails = function() {
                $scope.model.doc.data.edit = true;
            }
            
            $scope.saveDocumentDetails = function() {     
                if($scope.model.doc.data && $scope.model.doc.data.self){ 
                    if(!$rootScope.isInternal){
                        actionsOnADCService.saveADC($rootScope.applicationId,
                            $scope.model.doc.data.self.Id).then(function(data){
                            if(data){
                                $scope.model.doc.data.self = data[0].self; 
                                if(data[0].taskCount){
                                    $scope.model.doc.data.taskCount = data[0].taskCount;
                                }else{
                                    $scope.model.doc.data.taskCount = 0;
                                }                 
                                $scope.model.doc.data.edit = false;
                                //selectedModel holds the copy before edit
                                $scope.selectedModel = _.cloneDeep($scope.model.doc.data);
                                resetBreadcrumb();
                                createBreadCrumbs($scope.model.docList[0]);    
                                fetchAllADCService.getUserTaskList($rootScope.applicationId).then(function(data) {
                                    model.myTaskList = data;
                                    if(!model.myTaskList){
                                        model.myTaskList = [];
                                    }
                                    
                                });
                                // need to work on count
                                // syncTasksForADC($scope.model.doc.data.self.Id);             
                            }                  
                        });
                    }else{
                        if($scope.model.doc.data.self[nsPrefixRef + 'Review_Assigned_To__r'] 
                            && $scope.model.doc.data.self[nsPrefixRef + 'Review_Assigned_To__r'] !== ""){
                            $scope.model.doc.data.self[nsPrefixRef + 'Review_Assigned_To__c'] =
                                $scope.model.doc.data.self[nsPrefixRef + 'Review_Assigned_To__r'].Id;
                        }else{
                             $scope.model.doc.data.self[nsPrefixRef + 'Review_Assigned_To__r'] = null;
                             $scope.model.doc.data.self[nsPrefixRef + 'Review_Assigned_To__c'] = null;
                        }
                        if($scope.model.doc.data.self[nsPrefixRef + 'Reviewed_By__r']
                            && $scope.model.doc.data.self[nsPrefixRef + 'Reviewed_By__r'] !== ""){
                            $scope.model.doc.data.self[nsPrefixRef + 'Reviewed_By__c'] =
                                $scope.model.doc.data.self[nsPrefixRef + 'Reviewed_By__r'].Id;
                        }else{
                             $scope.model.doc.data.self[nsPrefixRef + 'Reviewed_By__r'] = null;
                             $scope.model.doc.data.self[nsPrefixRef + 'Reviewed_By__c'] = null;
                        }
                        if($scope.model.doc.data.self[nsPrefixRef + 'Party__r']
                            && $scope.model.doc.data.self[nsPrefixRef + 'Party__r'] !== ""){
                            $scope.model.doc.data.self[nsPrefixRef + 'Party__c'] = 
                                $scope.model.doc.data.self[nsPrefixRef + 'Party__r'].Id;
                        }else{
                             $scope.model.doc.data.self[nsPrefixRef + 'Party__r'] = null;
                             $scope.model.doc.data.self[nsPrefixRef + 'Party__c'] = null;
                        }
                        actionsOnADCService.saveADC($rootScope.applicationId,
                            angular.toJson($scope.model.doc.data.self),true).then(function(data){
                            if(data){
                                $scope.model.doc.data.self = data[0].self; 
                                $scope.model.doc.data.taskCount = data[0].taskCount;        
                                $scope.model.doc.data.edit = false;
                                //selectedModel holds the copy before edit
                                $scope.selectedModel = _.cloneDeep($scope.model.doc.data);
                                resetBreadcrumb();
                                createBreadCrumbs($scope.model.docList[0]);
                                fetchAllADCService.getUserTaskList($rootScope.applicationId).then(function(data) {
                                    model.myTaskList = data;
                                    if(!model.myTaskList){
                                        model.myTaskList = [];
                                    }
                                    
                                });
                                // need to work on count
                                //syncTasksForADC($scope.model.doc.data.self.Id);
                            }                  
                        });
                    }
                }     
            }
            
            var syncTasksForADC = function(taskParentId){
                  var count = 0;
                _.each(model.myTaskList , function(taskObj){
                    if(taskObj.WhatId === taskParentId && taskObj.Status !== null
                        && !_.include($scope.completeTaskStatus, taskObj.Status.toUpperCase())){
                        
                        taskObj.Status = $scope.completeTaskStatus[0];   
                        count++;         
                    }
                });
                
                //update tree
                var trail = $scope.breadCrumbs[taskParentId];
                var docs = model.docList;
        
                _.forEach(trail, function(node){
                     var next = _.find(docs, function(doc) {
                        return doc.self.Id === node.id;
                    });
                    
                    next.taskCount -= count;
                    
                    docs = next.children;
                }); 
                
                //for self
                var self = _.find(docs, function(doc) {
                    return doc.self.Id === taskParentId;
                });
                if(self){
                    self.taskCount -= count;
                }   
            }
            
            $scope.cancelEditDocumentDetails = function() {
//                actionsOnADCService.fetchDetails($rootScope.applicationId,
//                    $scope.model.doc.data.self.Id).then(function(data){ 
//                        if(data){
//                            angular.copy(data[0].self, $scope.model.doc.data.self);        
//                        }  
//                       $scope.model.doc.data.edit = false; 
//                });
               angular.copy($scope.selectedModel.self, $scope.model.doc.data.self);
               $scope.model.doc.data.edit = false;               
            }
            
            //changes for confirmation
            $scope.changeDocDetailView = function($event, doc, attachment){

                if($scope.selectedModel && $scope.selectedModel.self && !angular.equals($scope.selectedModel.self, $scope.model.doc.data.self)){

                   var modalInstance = $modal.open({
                        templateUrl: 'dealRoomConfirmation.html',
                        controller: 'ConfirmationCtrl',
                        size: 'sm' ,
                        resolve: {
                           message : function(){
                               return 'You have some unsaved changes. Are you sure you want to proceed?';
                           },   
                        }
                    });

                    modalInstance.result.then(function () { 
                       //call show doc detail - user said yes
                       $scope.cancelEditDocumentDetails();
                       $scope.showDocumentDetail($event, doc, attachment);

                    }, function () {
                        //dismissed - do nothing
                    });
                }              
                else{
                   $scope.showDocumentDetail($event, doc, attachment);
                }

            }

            $scope.showDocumentDetail = function($event, doc, attachment){                
                
                if($scope.model.doc.data){
                    $scope.model.doc.data.edit = false;
                }
                
                $scope.model.childId = '';
                
                if(attachment){
                    model.doc.data = null; 
                    model.docUrl = null;
                    model.doc.isDocCat = false;
                    $scope.prevStatus = null; 
                    model.doc.attachmentData = attachment;
                    model.doc.attachmentBreadcrumb = doc.breadCrumb.slice();;
                    if(!model.doc.attachmentBreadcrumb){
                        model.doc.attachmentBreadcrumb = [];
                    }
                    model.doc.attachmentBreadcrumb.push({id : doc.self.Id , name : doc.self.Name});
                    
                    $scope.selectNodeLabel(attachment, $event);
                    
                }else{
                    if(doc){
                        model.doc.attachmentData = null;
                        model.doc.data = doc;                
                        model.docUrl = '/apex/appDocCatDetail?id='+model.doc.data.self.Id;
                        model.doc.isDocCat = false;
                        $scope.prevStatus = model.doc.data.self[nsPrefixRef + 'Status__c'];
                        if(model.doc.data && model.doc.data.self.attributes && 
                            model.doc.data.self.attributes.type == nsPrefixRef + "Application_Document_Category__c"){
                            model.doc.isDocCat = true;
                        }
                        if($scope.model.doc.data.self &&
                            $scope.model.doc.data.self[nsPrefixRef + 'Document_Category__r'] &&
                                $scope.model.doc.data.self[nsPrefixRef + 'Document_Category__r'][nsPrefixRef + 'Child_Object_API_Name__c']){
                            actionsOnADCService.getChildId($rootScope.applicationId,$scope.model.doc.data.self.Id).then(function(data) {
                                $scope.model.childId = data.Id;
                            });
                        }  
                        
                        $scope.selectNodeLabel(doc, $event);
                        $scope.selectNodeHead(doc, $event)
                    }
                }
                
                $scope.selectedModel = _.cloneDeep($scope.model.doc.data);
                return true;
            }
            
            $scope.showSummaryDetails = function(){  
                var modalInstance = $modal.open({
                    templateUrl: 'adcSummaryContent.html',
                    controller: 'ModalInstanceSummaryCtrl',
                    size: 'genesis-trRoom lg' ,
                    resolve: {
                       childId : function(){
                           return $scope.model.childId;
                       },   
                    }
                });
                
                modalInstance.result.then(function () { }, function () {
                    //$log.info('Modal dismissed at: ' + new Date());
                });

            }
            
            $scope.showAlert = function(status){
                if(status === 'OPEN')
                    return true;
                else
                    return false;
            }
            
            $scope.addNewCategoryFn = function(){  
                var modalInstance = $modal.open({
                    templateUrl: 'newAppDocModalContent.html',
                    controller: 'ModalInstanceCtrl',
                    size: 'md' ,
                    resolve: {
                       dcList: function(){
                           return $scope.dcList;
                       },
                       doc: function(){
                           return model.doc.data;
                       }
                    }
                });
                
                modalInstance.result.then(function (selectedItem) {
                    $scope.selected = selectedItem; 
                    if($scope.model.doc && $scope.model.doc.data){
                        if(selectedItem && selectedItem.Id && $scope.model.doc.data.self && $scope.model.doc.data.self.Name === "Root"){
                            actionsOnADCService.addNewAppDoc($rootScope.applicationId,selectedItem.Id).then(function(data) {
                                if(data){   
                                    data.collapsed = true;
                                    if( !$scope.model.doc.data.children){
                                         $scope.model.doc.data.children = [];
                                    }
                                    $scope.model.doc.data.taskCount += data.taskCount;
                                    _.forEach(data.children, function(cNode){
                                         $scope.model.doc.data.children.push(cNode);
                                    });
                                    $scope.model.doc.data.children.sort(function(a, b) { 
                                        if (a.self.Name < b.self.Name)
                                            return -1;
                                        if (a.self.Name > b.self.Name)
                                            return 1;
                                        return 0;
                                    });
                                    
                                    resetBreadcrumb();
                                    createBreadCrumbs($scope.model.docList[0]);   
                                } 
                                $scope.selected = {};     
                            });     
                        }else if($scope.model.doc.data.self && $scope.model.doc.data.self.Name !== "Root"){
                            actionsOnADCService.addNewAppDocFolder($rootScope.applicationId,
                                    $scope.model.doc.data.self.Id,
                                    selectedItem).then(function(data) {
                                if(data){
                                    data.collapsed = false;
                                    if(!data.userTasks){
                                        
                                    }
                                    if(!$scope.model.doc.data.breadCrumb ){
                                        $scope.model.doc.data.breadCrumb = [];
                                    }
                                    data.breadCrumb = _.clone($scope.model.doc.data.breadCrumb);
                                    data.breadCrumb.push({ name : $scope.model.doc.data.self.Name ,
                                                           id : $scope.model.doc.data.self.Id});
                                    
                                    $scope.model.doc.data.children.push(data);
                                    $scope.breadCrumbs[data.Id] = data.breadCrumb;
                                    $scope.model.doc.data.children.sort(function(a, b) { 
                                        if (a.self.Name < b.self.Name)
                                            return -1;
                                        if (a.self.Name > b.self.Name)
                                            return 1;
                                        return 0;
                                    });
                                    resetBreadcrumb();
                                    createBreadCrumbs($scope.model.docList[0]);
                                }
                                $scope.selected = {}; 
                            }); 
                        }else{
                            utilitiesService.notifyUser("error",'Operation not allowed!');
                        }
                    }else{
                        utilitiesService.notifyUser("error",'Operation not allowed!');
                    }              
                }, function () {
                    //$log.info('Modal dismissed at: ' + new Date());
                });
                
            }
            
            
            //define model
            var model = {
                docList : [],
                doc : {},
                docStats : { TOTAL : 0, OPEN :  0, SUBMITTED : 0, CLEARED : 0, REJECTED : 0},
                docCatSelected : undefined,
                taskStatus : 1,
            };
           
            $scope.model = model;
            
            $scope.addNewAttachment = function(){            
                if(!model.doc.data.appDocAtchList){
                    model.doc.data.appDocAtchList = [];
                }
                actionsOnAttachmentsService.getLinkedAtchList($rootScope.applicationId,
                                    model.doc.data.self.Id , $scope.model.newAttachment.Id).then(function(data) {
                    if( data && data.toUpperCase() == 'SUCCESS' ){
                        model.doc.data.appDocAtchList.push($scope.model.newAttachment);
                        $rootScope.$emit('attachmentLinked', $scope.model.newAttachment.Id); 
                        $scope.newAttachment = null;
                    }                
                            
                });  
                
                
            }
            
            $scope.selectNodeHead = function(node, $event) {
                $event.stopPropagation && $event.stopPropagation();
                $event.preventDefault && $event.preventDefault();
                $event.cancelBubble = !0;
                $event.returnValue = !1;
                if(!node.self.genesis__Active__c){
                    return;
                }
                if(node){
                    node.collapsed = !node.collapsed;
                }

            }

            $scope.selectNodeLabel = function(node, $event) {
                $event.stopPropagation && $event.stopPropagation();
                $event.preventDefault && $event.preventDefault();
                $event.cancelBubble = !0;
                $event.returnValue = !1;
                $scope.currentNode && $scope.currentNode.selected && ($scope.currentNode.selected = void 0);
                node.selected = "selected";
                $scope.currentNode = node;

                return true;
            }
        }]);
        //controller end

    })();

//angular tree view - directive
(function(angular) {
    angular.module("angularTreeview", []).directive("treeModel", ['$compile', function($compile) {
        return {
            restrict: "A",
            link: function(scope, element, attrs) {
            
                    var treeModel = attrs.treeModel,
                        nodeLabel = attrs.nodeLabel || "label",
                        nodeId = attrs.nodeId,
                        nodeChildren = attrs.nodeChildren || "nodeChildren",
                        attachments = attrs.appDocAtchList,
                        isAttachment = attrs.isAttachment,
                        
                        template = '<ul>' + 
                        '<li data-ng-repeat="node in ' + treeModel + '">' +           
                        '<i class="fa fa-trash action-icons" style="cursor : pointer;" title = "Delete Category" ng-click="deleteDocument(node)" data-ng-show="node.self.genesis__Active__c"></i>' +
                        '<i class="fa fa-undo action-icons" style="cursor : pointer;" title = "Undo Delete" ng-click="undodeleteDocument(node, $event)" data-ng-show="!node.self.genesis__Active__c"></i>' +
                        '<span>' +
                        '<i class="collapsed fa fa-folder" data-ng-click="selectNodeHead(node, $event)" ' + 
                            ' data-ng-show="( node.' + nodeChildren + ' !==null && node.collapsed )"></i>' +
                        '<i class="expanded fa fa-folder-open" data-ng-click="selectNodeHead(node, $event)" ' + 
                            ' data-ng-show="(node.' + nodeChildren + ' !==null && !node.collapsed )"></i>' +
                         '<sub><i ng-class="getStatusIcon(node.self.' + nsPrefixRef + 'Status__c)" style="padding-left : 0px !important;"></i><span style="display:none;">({{node.taskCount}})</span></sub>' +
                         '</span>' +
                        '<i ng-class="getFileIcon(node.' + nodeLabel + ')" data-ng-hide="!' + isAttachment + ' && node.' + nodeChildren + ' !==null"></i>' +
                        '<span id="{{node.' + nodeId + '}}" data-ng-class="node.selected" data-ng-click="changeDocDetailView($event, node)" >' + 
                        '{{node.' + nodeLabel + '}}</span>' +        
                        '<div data-ng-hide="node.collapsed" data-tree-model="node.' + nodeChildren + 
                            '" data-node-id=' + attrs.nodeId + ' data-node-label =' + nodeLabel + 
                            ' data-node-children=' + nodeChildren + '></div>' +
                        '<li ng-repeat = "natch in node.appDocAtchList">' +
                            '<i class="fa fa-trash action-icons" style="cursor : pointer;" title = "Delete Category" ng-click="deleteDocument(node,natch)" ></i>' +
                            '<i ng-class="getFileIcon(natch.Name)"/><span data-ng-class="natch.selected" data-ng-click="changeDocDetailView($event, node, natch)">' + 
                            ' {{natch.Name}}</span></li>' +
                        '</ul>';  

                    if (treeModel && treeModel.length) {                    
                        if (attrs.angularTreeview) {
                            scope.$watch(treeModel, function(newValue, oldValue) {
                                element.empty().html($compile(template)(scope));
                            }, !1);
                        } else {
                            element.html($compile(template)(scope));
                        }                

                    }

                } //link end
        }
    }])
})(angular);

    </script>
</apex:page>