# Unique name for this workflow
name: Deploy integration branch to integration and staging/uat orgs

# Definition when the workflow should run
on:
    push:
      branches: [develop, qa]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-int-and-staging-orgs:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:

            # Now we install nodejs in the VM, and specify version 18, below 18 might not work
            - uses: actions/setup-node@v3
              with:
                node-version: '18'
                
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk

            #JUST FOR DEMO 
            # Install jq,yq as it is required for the next step
            - name: 'Install jq,yq'
              run: |
                pip install yq
                sudo apt-get install jq

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            # Store secret for both otgs
            - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt
                  echo ${{ secrets.SFDX_STAGING_URL}} > ./SFDX_STAGING_URL.txt

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

            #JUST FOR DEMO 
            - name: 'extract test classes in changed-sources/package/package.xml' 
              run: |
                  APEX_CLASSES=$(xq . < changed-sources/package/package.xml | jq '.Package.types | [.] | flatten | map(select(.name=="ApexClass")) | .[] | .members | [.] | flatten | map(select(. | index("*") | not)) | map(select(. | index("Test") | not)) | map(. + "Test") | unique | join(",")' -r)
                  echo $APEX_CLASSES 
                  echo "APEX_CLASSES=$APEX_CLASSES" >> $GITHUB_ENV

            # Authenticate to org
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            - name: 'Deploy the entire branch to Integration org'
              run: |
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app"
                  fi

            - name: 'Check-only deploy delta changes - run specified change-sources/package/package.xml'
              if: env.APEX_TESTS != 'all' && env.APEX_TESTS == '' && env.APEX_CLASSES != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -d "./changed-sources/force-app" ]; then
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_CLASSES}} --json
                    sfdx force:source:deploy -p "changed-sources/force-app"  --json
                    #file exists

                    mkdir testresults
                    sfdx force:apex:run:test --target-org integration -n ${{env.APEX_CLASSES}} -d testresults --synchronous --json
                  fi

            - name: Get test result
              if: ${{ always() }}
              run: |
                    TEST_ID=$(cat testresults/test-run-id.txt)
                    testsRan=$(jq .summary.testsRan testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    passing=$(jq .summary.passing testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    failing=$(jq .summary.failing testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    passRate=$(jq .summary.passRate testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    failRate=$(jq .summary.failRate testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    hostname=$(jq .summary.hostname testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    testRunCoverage=$(jq .summary.testRunCoverage testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                    orgWideCoverage=$(jq .summary.orgWideCoverage testresults/test-result-${TEST_ID}.json | sed 's/"//g')

                    if [ $tetsRan!='' ]; then
                      msg="testRan : $testsRan\npassing : $passing\nfailing : $failing\npassRate : $passRate\nfailRate : $failRate\nhostname : $hostname\ntestRunCoverage : $testRunCoverage\norgWideCoverage : $orgWideCoverage"
                      echo $msg
                      echo "msg=$msg" >> $GITHUB_ENV
                    fi

            - name: Send custom JSON data to Slack workflow
              id: slack
              uses: slackapi/slack-github-action@v1.23.0
              with:
                payload: |
                  {
                    "text": "${{env.msg}}"
                  }
                  
              env:
                SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
              

            # Authenticate to org
            #- name: 'Authenticate to Staging Org to Staging org'
            #  run: sfdx auth:sfdxurl:store -f ./SFDX_STAGING_URL.txt -s -a staging

            #- name: 'Deploy the entire branch'
            #  run: sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json

            #- name: 'Deploy destructive changes (if any) to Staging org'
            #  run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
