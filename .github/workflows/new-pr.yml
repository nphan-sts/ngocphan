# Unique name for this workflow
name: Validate PR on develop branch

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize, reopened]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "develop". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ qa, main ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-qa-org:
        if: ${{ github.actor != 'dependabot[bot]' && github.base_ref == 'qa'}}
        runs-on: ubuntu-latest
        steps:
            # Now we install nodejs in the VM, and specify version 18, below 18 might not work
            - uses: actions/setup-node@v3
              with:
                node-version: '18'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            - name: Setup SFDX
              uses: sfdx-actions/setup-sfdx@v1
              with:
                sfdx-auth-url: ${{ secrets.SFDX_QA_URL }}

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk
                
            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from origin/qa --output changed-sources/ --generate-delta --source force-app/
                  
                  echo "changed-sources"
                  if [ -d "./changed-sources" ]; then
                    find changed-sources -type d -exec ls {} \;
                  fi
                  if [ -d "./destructiveChanges" ]; then
                    find destructiveChanges -type d -exec ls {} \;
                  fi

            - name: 'Install groovy'
              run: |
                  sudo apt-get -qq -y install curl wget unzip zip groovy
                  groovy --version
                  groovy ParseManifests

            # If no test specified
            - name: 'Check-only deploy delta changes - no tests'
              if: env.APEX_TESTS == 'none'
              run: |
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly  
                  fi

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: env.APEX_TESTS == 'all'
              run: |
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly -l RunLocalTests  
                  fi

            # Run tests specified by dev
            - name: 'Check-only deploy delta changes - run specified tests - User specified'
              if: env.APEX_TESTS != 'all' && env.APEX_TESTS != 'none' && env.APEX_TESTS != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} 
                  fi

            # Run tests generated in change-sources/package/package.xml
            - name: 'Check-only deploy delta changes - run specified change-sources/package/package.xml'
              if: env.APEX_TESTS == ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -f changesExist.txt ] && [ -f testsToRun.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests $(<testsToRun.txt)
                  fi
                  if [ -f changesExist.txt ] && [ -f testsToRun.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests $(<testsToRun.txt)
                  elif [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly
                  fi

            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-stage-org:
        if: ${{ github.actor != 'dependabot[bot]' && github.base_ref == 'main' }}
        runs-on: ubuntu-latest
        steps:
            # Now we install nodejs in the VM, and specify version 18, below 18 might not work
            - uses: actions/setup-node@v3
              with:
                node-version: '18'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            - name: Setup SFDX
              uses: sfdx-actions/setup-sfdx@v1
              with:
                sfdx-auth-url: ${{ secrets.SFDX_STAGE_URL }}

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk
                
            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from origin/main --output changed-sources/ --generate-delta --source force-app/
                  
                  echo "changed-sources"
                  if [ -d "./changed-source" ]; then
                    find changed-sources -type d -exec ls {} \;
                  fi
                  if [ -d "./destructiveChanges" ]; then
                    find destructiveChanges -type d -exec ls {} \;
                  fi

            # If no test specified
            - name: 'Check-only deploy delta changes - no tests'
              if: env.APEX_TESTS == 'none'
              run: |
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly  
                  fi

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: env.APEX_TESTS == 'all'
              run: |
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly -l RunLocalTests  
                  fi

            # Run tests specified by dev
            - name: 'Check-only deploy delta changes - run specified tests - User specified'
              if: env.APEX_TESTS != 'all' && env.APEX_TESTS != 'none' && env.APEX_TESTS != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} 
                  fi

            # Run tests generated in change-sources/package/package.xml
            - name: 'Check-only deploy delta changes - run specified change-sources/package/package.xml'
              if: env.APEX_TESTS == '' && env.APEX_CLASSES != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_CLASSES}}
                  fi

            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-main-org:
        if: ${{ github.actor != 'dependabot[bot]' && github.base_ref == 'main' }}
        runs-on: ubuntu-latest
        steps:
            # Now we install nodejs in the VM, and specify version 18, below 18 might not work
            - uses: actions/setup-node@v3
              with:
                node-version: '18'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            - name: Setup SFDX
              uses: sfdx-actions/setup-sfdx@v1
              with:
                sfdx-auth-url: ${{ secrets.SFDX_PROD_URL }}

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk
        
                
            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from origin/main --output changed-sources/ --generate-delta --source force-app/
                  
                  echo "changed-sources"
                  if [ -d "./changed-source" ]; then
                    find changed-sources -type d -exec ls {} \;
                  fi
                  if [ -d "./destructiveChanges" ]; then
                    find destructiveChanges -type d -exec ls {} \;
                  fi

            # If no test specified
            - name: 'Check-only deploy delta changes - no tests'
              if: env.APEX_TESTS == 'none'
              run: |
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly  
                  fi

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: env.APEX_TESTS == 'all'
              run: |
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app" --checkonly -l RunLocalTests  
                  fi

            # Run tests specified by dev
            - name: 'Check-only deploy delta changes - run specified tests - User specified'
              if: env.APEX_TESTS != 'all' && env.APEX_TESTS != 'none' && env.APEX_TESTS != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} 
                  fi

            # Run tests generated in change-sources/package/package.xml
            - name: 'Check-only deploy delta changes - run specified change-sources/package/package.xml'
              if: env.APEX_TESTS == '' && env.APEX_CLASSES != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -f changesExist.txt ]; then
                    sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_CLASSES}}
                  fi

            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
