# Unique name for this workflow
name: Daily run test

# Definition when the workflow should run
on:
    schedule:
      # At the end of every day
      - cron: "0 20 8 * *"
            
# Jobs to be executed
jobs:
    run-test-int-org:
        runs-on: ubuntu-latest
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            # Store secret for both otgs
            - name: 'Populate auth file with SFDX_URL secret of the integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            - name: 'Deploy the entire branch to Integration org'
              run: |
                  mkdir testresults
                  sfdx force:apex:run:test --target-org integration -d testresults --code-coverage -r human --testlevel RunLocalTests --json

                  TEST_ID=$(cat testresults/test-run-id.txt)
                  testsRan=$(jq .summary.testsRan testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  passing=$(jq .summary.passing testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  failing=$(jq .summary.failing testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  passRate=$(jq .summary.passRate testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  failRate=$(jq .summary.failRate testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  hostname=$(jq .summary.hostname testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  testRunCoverage=$(jq .summary.testRunCoverage testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  orgWideCoverage=$(jq .summary.orgWideCoverage testresults/test-result-${TEST_ID}.json | sed 's/"//g')
                  msg="testRan : $testsRan\npassing : $passing\nfailing : $failing\npassRate : $passRate\nfailRate : $failRate\nhostname : $hostname\ntestRunCoverage : $testRunCoverage\norgWideCoverage : $orgWideCoverage"
                  echo "msg=$msg" >> $GITHUB_ENV

            - name: Send custom JSON data to Slack workflow
              id: slack
              uses: slackapi/slack-github-action@v1.23.0
              with:
                payload: |
                  {
                    "text": "${{env.msg}}"
                  }
                  
              env:
                SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  
            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
