# Unique name for this workflow
name: Deploy main branch to production org

# Definition when the workflow should run
on:
    push:
      branches: [ main ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-stage-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - name: Setup SFDX
              uses: sfdx-actions/setup-sfdx@v1
              with:
                sfdx-auth-url: ${{ secrets.SFDX_STAGE_URL }}

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
                  echo "changed-sources"
                  find changed-sources -type d -exec ls {} \;
                  echo "destructive Changes"
                  find destructiveChanges -type d -exec ls {} \;

            - name: 'extract test classes in changed-sources/package/package.xml' 
              run: |
                  APEX_CLASSES=$(xq . < changed-sources/package/package.xml | jq '.Package.types | [.] | flatten | map(select(.name=="ApexClass")) | .[] | .members | [.] | flatten | map(select(. | index("*") | not)) | map(select(. | index("Test") | not)) | map(. + "Test") | unique | join(",")' -r)
                  echo $APEX_CLASSES 
                  echo "APEX_CLASSES=$APEX_CLASSES" >> $GITHUB_ENV

            # If no test specified
            - name: 'Check-only deploy delta changes - no tests'
              if: env.APEX_TESTS == 'none'
              run: |
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app"  
                  fi

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: env.APEX_TESTS == 'all'
              run: |
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app" -l RunLocalTests  
                  fi

            # Run tests specified by dev
            - name: 'Check-only deploy delta changes - run specified tests - User specified'
              if: env.APEX_TESTS != 'all' && env.APEX_TESTS != 'none' && env.APEX_TESTS != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app" -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} 
                  fi

            # Run tests generated in change-sources/package/package.xml
            - name: 'Check-only deploy delta changes - run specified change-sources/package/package.xml'
              if: env.APEX_TESTS == '' && env.APEX_CLASSES != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -d "./changed-sources/force-app" ]; then
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app" -l RunSpecifiedTests --runtests ${{env.APEX_CLASSES}}
                  fi

            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --ignorewarnings
    validate-branch-to-production-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - name: Setup SFDX
              uses: sfdx-actions/setup-sfdx@v1
              with:
                sfdx-auth-url: ${{ secrets.SFDX_PROD_URL }}

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
                  echo "changed-sources"
                  find changed-sources -type d -exec ls {} \;
                  echo "destructive Changes"
                  find destructiveChanges -type d -exec ls {} \;

            - name: 'extract test classes in changed-sources/package/package.xml' 
              run: |
                  APEX_CLASSES=$(xq . < changed-sources/package/package.xml | jq '.Package.types | [.] | flatten | map(select(.name=="ApexClass")) | .[] | .members | [.] | flatten | map(select(. | index("*") | not)) | map(select(. | index("Test") | not)) | map(. + "Test") | unique | join(",")' -r)
                  echo $APEX_CLASSES 
                  echo "APEX_CLASSES=$APEX_CLASSES" >> $GITHUB_ENV

            # If no test specified
            - name: 'Check-only deploy delta changes - no tests'
              if: env.APEX_TESTS == 'none'
              run: |
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app" --checkonly  
                  fi

            # If the env variable equals all, we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: env.APEX_TESTS == 'all'
              run: |
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app" --checkonly -l RunLocalTests  
                  fi

            # Run tests specified by dev
            - name: 'Check-only deploy delta changes - run specified tests - User specified'
              if: env.APEX_TESTS != 'all' && env.APEX_TESTS != 'none' && env.APEX_TESTS != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -d "./changed-sources/force-app" ]; then
                    #file exists
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} 
                  fi

            # Run tests generated in change-sources/package/package.xml
            - name: 'Check-only deploy delta changes - run specified change-sources/package/package.xml'
              if: env.APEX_TESTS == '' && env.APEX_CLASSES != ''
              run: |
                  echo ${{env.APEX_TESTS}}
                  echo "--- Delta Check-Only Deploy ---"
                  if [ -d "./changed-sources/force-app" ]; then
                    grep -q '<types>' changed-sources/package/package.xml && sfdx force:source:deploy -p "changed-sources/force-app"  --checkonly -l RunSpecifiedTests --runtests ${{env.APEX_CLASSES}}
                  fi

            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
